{"version":3,"sources":["../../server/src/middleware/meal.js"],"names":["Joi","require","MealMiddleware","req","res","next","schema","name","string","required","price","number","min","validate","body","files","Error","imageMimes","includes","image","mimetype","details","undefined","message","String","status","json","type","mealId","quantity","module","exports"],"mappings":"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","sourcesContent":["var Joi = require('joi');\n\nclass MealMiddleware {\n    static async validateAddMeal(req, res, next) {\n        try {\n            const schema = {\n                name: Joi.string().required(),\n                price: Joi.number()\n                    .min(1)\n                    .required()\n            };\n            await Joi.validate(req.body, schema);\n            if (req.files === null) {\n                throw new Error('Meal Image Required');\n            }\n            const imageMimes = ['image/jpeg', 'image/jpg', 'image/png'];\n            if (!imageMimes.includes(req.files.image.mimetype)) {\n                throw new Error('Only JPG, JPEG & PNG Images are allowed');\n            }\n            next();\n            return true;\n        } catch (err) {\n            let message;\n            if (err.details !== undefined) {\n                message = String(err.details[0].message);\n            } else {\n                message = String(err.message);\n            }\n            return res.status(400).json({\n                status: 'error',\n                message,\n                type: 'validation'\n            });\n        }\n    }\n\n    static async validateUpdateMeal(req, res, next) {\n        try {\n            const schema = {\n                name: Joi.string(),\n                price: Joi.number().min(1)\n            };\n            await Joi.validate(req.body, schema);\n            if (req.files !== null) {\n                const imageMimes = ['image/jpeg', 'image/jpg', 'image/png'];\n                if (!imageMimes.includes(req.files.image.mimetype)) {\n                    throw new Error('Only JPG, JPEG & PNG Images are allowed');\n                }\n            }\n            next();\n            return true;\n        } catch (err) {\n            let message;\n            if (err.details !== undefined) {\n                message = String(err.details[0].message);\n            } else {\n                message = String(err.message);\n            }\n            return res.status(400).json({\n                status: 'error',\n                message,\n                type: 'validation'\n            });\n        }\n    }\n\n    static async validateAddMealToMenu(req, res, next) {\n        try {\n            const schema = {\n                mealId: Joi.number().required(),\n                quantity: Joi.number()\n                    .min(1)\n                    .required()\n            };\n            await Joi.validate(req.body, schema);\n            next();\n            return true;\n        } catch (err) {\n            let message;\n            if (err.details !== undefined) {\n                message = String(err.details[0].message);\n            } else {\n                message = String(err.message);\n            }\n            return res.status(400).json({\n                status: 'error',\n                message,\n                type: 'validation'\n            });\n        }\n    }\n}\n\nmodule.exports = MealMiddleware;\n"],"file":"meal.js"}