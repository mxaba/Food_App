{"version":3,"sources":["../../server/src/middleware/order.js"],"names":["Joi","require","OrderMiddleware","req","res","next","schema","mealId","number","min","required","quantity","validate","body","status","json","message","String","details","type","action","string","includes","Error","undefined","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;IAEMC,e;;;;;;;;;;;;+CAC8BC,G,EAAKC,G,EAAKC,I;;;;;;;;AAE5BC,gBAAAA,O,GAAS;AACXC,kBAAAA,MAAM,EAAEP,GAAG,CAACQ,MAAJ,GACHC,GADG,CACC,CADD,EAEHC,QAFG,EADG;AAIXC,kBAAAA,QAAQ,EAAEX,GAAG,CAACQ,MAAJ,GACLC,GADK,CACD,CADC,EAELC,QAFK;AAJC,iB;;uBAQTV,GAAG,CAACY,QAAJ,CAAaT,GAAG,CAACU,IAAjB,EAAuBP,OAAvB,C;;;AACND,gBAAAA,IAAI;iDACG,I;;;;;iDAEAD,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAEC,MAAM,CAAC,YAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAFS;AAGxBG,kBAAAA,IAAI,EAAE;AAHkB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAQkBhB,G,EAAKC,G,EAAKC,I;;;;;;;;AAE7BC,gBAAAA,Q,GAAS;AACXc,kBAAAA,MAAM,EAAEpB,GAAG,CAACqB,MAAJ,GAAaX,QAAb;AADG,iB;;uBAGTV,GAAG,CAACY,QAAJ,CAAaT,GAAG,CAACU,IAAjB,EAAuBP,QAAvB,C;;;oBACD,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,EAAmCgB,QAAnC,CAA4CnB,GAAG,CAACU,IAAJ,CAASO,MAArD,C;;;;;sBACK,IAAIG,KAAJ,CAAU,0BAAV,C;;;AAEVlB,gBAAAA,IAAI;kDACG,I;;;;;;AAGP,oBAAI,aAAIa,OAAJ,KAAgBM,SAApB,EAA+B;AAC3BR,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAAhB;AACH,iBAFD,MAEO;AACHA,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAID,OAAL,CAAhB;AACH;;kDACMZ,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAPA,OAFwB;AAGxBG,kBAAAA,IAAI,EAAE;AAHkB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAQmBhB,G,EAAKC,G,EAAKC,I;;;;;;;;uBAE9BL,GAAG,CAACY,QAAJ,CAAaT,GAAG,CAACU,IAAjB,EAAuBP,MAAvB,C;;;AACND,gBAAAA,IAAI;kDACG,I;;;;;;AAGP,oBAAI,aAAIa,OAAJ,KAAgBM,SAApB,EAA+B;AAC3BR,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAAhB;AACH,iBAFD,MAEO;AACHA,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAID,OAAL,CAAhB;AACH;;kDACMZ,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAPA,OAFwB;AAGxBG,kBAAAA,IAAI,EAAE;AAHkB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AASnBM,MAAM,CAACC,OAAP,GAAiBxB,eAAjB","sourcesContent":["var Joi = require('joi');\n\nclass OrderMiddleware {\n    static async validateAddToOrder(req, res, next) {\n        try {\n            const schema = {\n                mealId: Joi.number()\n                    .min(1)\n                    .required(),\n                quantity: Joi.number()\n                    .min(1)\n                    .required()\n            };\n            await Joi.validate(req.body, schema);\n            next();\n            return true;\n        } catch (err) {\n            return res.status(400).json({\n                status: 'error',\n                message: String(err.details[0].message),\n                type: 'validation'\n            });\n        }\n    }\n\n    static async validateModifyOrder(req, res, next) {\n        try {\n            const schema = {\n                action: Joi.string().required()\n            };\n            await Joi.validate(req.body, schema);\n            if (!['increase', 'decrease', 'delete'].includes(req.body.action)) {\n                throw new Error('Invalid Action Requested');\n            }\n            next();\n            return true;\n        } catch (err) {\n            let message;\n            if (err.details !== undefined) {\n                message = String(err.details[0].message);\n            } else {\n                message = String(err.message);\n            }\n            return res.status(400).json({\n                status: 'error',\n                message,\n                type: 'validation'\n            });\n        }\n    }\n\n    static async validateOrdeCheckout(req, res, next) {\n        try {\n            await Joi.validate(req.body, schema);\n            next();\n            return true;\n        } catch (err) {\n            let message;\n            if (err.details !== undefined) {\n                message = String(err.details[0].message);\n            } else {\n                message = String(err.message);\n            }\n            return res.status(400).json({\n                status: 'error',\n                message,\n                type: 'validation'\n            });\n        }\n    }\n}\n\nmodule.exports = OrderMiddleware;\n"],"file":"order.js"}