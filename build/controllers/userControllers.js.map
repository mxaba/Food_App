{"version":3,"sources":["../../server/src/controllers/userControllers.js"],"names":["jwt","require","bcrypt","secret","UserController","req","res","body","name","email","password","hash","User","create","user","safeUser","id","jwtToken","sign","expiresIn","status","json","message","token","findOne","where","Error","compare","result","module","exports"],"mappings":"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","sourcesContent":["var jwt = require('jsonwebtoken');\nvar bcrypt = require('bcrypt');\n//var User = require'../models/user';\nvar secret = require(\"../db/jwt_secret\");\n\nclass UserController {\n    static async registerUser(req, res) {\n        try {\n            const { name, email, password } = req.body;\n            const hash = await bcrypt.hash(password, 10);\n            const user = await User.create({ name, email, password: hash });\n            const safeUser = {\n                id: user.id,\n                name: user.name,\n                email: user.email\n               \n            };\n            const jwtToken = jwt.sign({ user: safeUser }, secret, {\n                expiresIn: 86400\n            });\n            return res.status(201).json({\n                status: 'success',\n                message: 'User Registered',\n                token: `Bearer ${jwtToken}`,\n                user: safeUser\n            });\n        } catch (err) {\n            return res.status(500).json({\n                status: 'error',\n                message: err.message\n            });\n        }\n    }\n\n    static async loginUser(req, res) {\n        try {\n            const { email, password } = req.body;\n            const user = await User.findOne({ where: { email } });\n            if (!user) {\n                throw new Error('User with that email does not exist');\n            }\n            const result = await bcrypt.compare(password, user.password);\n            if (!result) {\n                throw new Error(\"Password doesn't match our records\");\n            }\n            const safeUser = {\n                id: user.id,\n                name: user.name,\n                email: user.email\n                \n            };\n            const jwtToken = jwt.sign({ user: safeUser }, secret, {\n                expiresIn: 86400\n            });\n            return res.status(200).json({\n                status: 'success',\n                message: 'User Logged In',\n                token: `Bearer ${jwtToken}`,\n                user: safeUser\n            });\n        } catch (err) {\n            return res.status(500).json({\n                status: 'error',\n                message: err.message\n            });\n        }\n    }\n}\n\nmodule.exports = UserController;\n"],"file":"userControllers.js"}