{"version":3,"sources":["../../server/src/controllers/catererControllers.js"],"names":["jwt","require","bcrypt","secret","CatererController","req","res","body","name","email","password","hash","Caterer","create","caterer","safeCaterer","id","jwtToken","sign","isCaterer","expiresIn","status","json","message","token","findOne","where","Error","compare","result","user","module","exports"],"mappings":"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","sourcesContent":["var jwt = require('jsonwebtoken');\nvar bcrypt = require('bcrypt');\n//var Caterer = require'../models/caterer';\nvar secret = require(\"../db/jwt_secret\");\n\nclass CatererController {\n    static async registerCaterer(req, res) {\n        try {\n            const {\n              name,\n              email,\n              password\n            } = req.body;\n            const hash = await bcrypt.hash(password, 10);\n            const caterer = await Caterer.create({\n              name,\n              email,\n              password: hash\n            });\n            const safeCaterer = {\n                id: 2,\n                name: caterer.name,\n                email: caterer.email,\n                \n            };\n            const jwtToken = jwt.sign({ caterer: safeCaterer, isCaterer: true }, secret, {\n                expiresIn: 86400\n            });\n            return res.status(201).json({\n                status: 'success',\n                message: 'Caterer Registered',\n                token: `Bearer ${jwtToken}`,\n                caterer: safeCaterer\n            });\n        } catch (err) {\n            return res.status(500).json({\n                status: 'error',\n                message: err.message\n            });\n        }\n    }\n\n    static async loginCaterer(req, res) {\n        try {\n            const { email, password } = req.body;\n            const caterer = await Caterer.findOne({ where: { email } });\n            if (!caterer) {\n                throw new Error('Caterer with that email does not exist');\n            }\n            const result = await bcrypt.compare(password, caterer.password);\n            if (!result) {\n                throw new Error(\"Password doesn't match our records\");\n            }\n            const safeCaterer = {\n                id: caterer.id,\n                name: caterer.name,\n                email: caterer.email,\n                \n            };\n            const jwtToken = jwt.sign({ caterer: safeCaterer, isCaterer: true }, secret, {\n                expiresIn: 86400\n            });\n            return res.status(200).json({\n                status: 'success',\n                message: 'Caterer Logged In',\n                token: `Bearer ${jwtToken}`,\n                user: safeCaterer\n            });\n        } catch (err) {\n            return res.status(500).json({\n                status: 'error',\n                message: err.message\n            });\n        }\n    }\n}\n\nmodule.exports = CatererController;\n"],"file":"catererControllers.js"}