{"version":3,"sources":["../../server/src/controllers/authControllers.js"],"names":["jwt","require","secret","AuthController","req","res","next","token","headers","authorization","status","json","message","jwtToken","split","verify","decoded","user","isCaterer","Error","caterer","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;IAEME,c;;;;;;;;;;;;+CAC2BC,G,EAAKC,G,EAAKC,I;;;;;;AAC7BC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACrBF,K;;;;;iDACMF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;AAKLC,gBAAAA,Q,GAAWN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,C;;;uBAESd,GAAG,CAACe,MAAJ,CAAWF,QAAX,EAAqBX,MAArB,C;;;AAAhBc,gBAAAA,O;AACNZ,gBAAAA,GAAG,CAACa,IAAJ,GAAWD,OAAO,CAACC,IAAnB;AACAX,gBAAAA,IAAI;iDACG,I;;;;;iDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOeR,G,EAAKC,G,EAAKC,I;;;;;;AAC9BC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACrBF,K;;;;;kDACMF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;AAKLC,gBAAAA,Q,GAAWN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,C;;;uBAESd,GAAG,CAACe,MAAJ,CAAWF,QAAX,EAAqBX,MAArB,C;;;AAAhBc,gBAAAA,O;;oBACDA,OAAO,CAACE,S;;;;;sBACH,IAAIC,KAAJ,CAAU,cAAV,C;;;AAEVf,gBAAAA,GAAG,CAACgB,OAAJ,GAAcJ,OAAO,CAACI,OAAtB;AACAd,gBAAAA,IAAI;kDACG,I;;;;;kDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AAQnBS,MAAM,CAACC,OAAP,GAAiBnB,cAAjB","sourcesContent":["var jwt = require('jsonwebtoken');\nvar secret = require(\"../db/jwt_secret\");\n\nclass AuthController {\n    static async verifyUserToken(req, res, next) {\n        const token = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({\n                status: 'error',\n                message: 'No Token Provided'\n            });\n        }\n        const jwtToken = token.split(' ')[1];\n        try {\n            const decoded = await jwt.verify(jwtToken, secret);\n            req.user = decoded.user;\n            next();\n            return true;\n        } catch (err) {\n            return res.status(401).json({\n                status: 'error',\n                message: 'Invalid Auth Token'\n            });\n        }\n    }\n\n    static async verifyAdminToken(req, res, next) {\n        const token = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({\n                status: 'error',\n                message: 'No Token Provided'\n            });\n        }\n        const jwtToken = token.split(' ')[1];\n        try {\n            const decoded = await jwt.verify(jwtToken, secret);\n            if (!decoded.isCaterer) {\n                throw new Error('Unauthorized');\n            }\n            req.caterer = decoded.caterer;\n            next();\n            return true;\n        } catch (err) {\n            return res.status(401).json({\n                status: 'error',\n                message: 'Unauthorized'\n            });\n        }\n    }\n}\n\nmodule.exports = AuthController;\n"],"file":"authControllers.js"}