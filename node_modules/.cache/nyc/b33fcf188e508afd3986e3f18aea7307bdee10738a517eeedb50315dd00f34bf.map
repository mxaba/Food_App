{"version":3,"sources":["caterer.js"],"names":["assert","chai","expect","use","chaiHTTP","API_PREFIX","before","done","app","on","beforeEach","describe","it","request","post","send","name","email","phone","then","res","to","have","status","equal","body","type","catch","err","console","log","message","password","after","Caterer","destroy","where"],"mappings":"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","sourceRoot":"/home/mxaba/Desktop/My-Meal-App-develop/server/src/test","sourcesContent":["import chai from 'chai';\nimport chaiHTTP from 'chai-http';\nimport app from '../app';\nimport Caterer from '../db/models/caterer';\n\nconst { assert, expect, use } = chai;\n\nuse(chaiHTTP);\n\nconst API_PREFIX = '/api/v1';\n\nbefore(done => {\n    app.on('dbConnected', () => {\n        done();\n    });\n});\n\nbeforeEach(done => {\n    done();\n});\n\ndescribe('Caterer Auth Signup Endpoint Tests', () => {\n    it('POST /auth/caterer/signup - Caterer SignUp Validation Test', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger@test.com',\n                phone: '08028372825',\n            })\n            .then(res => {\n                expect(res).to.have.status(400);\n                assert.equal(res.body.status, 'error');\n                assert.equal(res.body.type, 'validation');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/signup', err.message));\n    });\n    it('POST /auth/caterer/signup - Caterer Can Sign Up', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger@test.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(201);\n                assert.equal(res.body.status, 'success');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/signup', err.message));\n    });\n    it(\"POST /auth/caterer/signup - Caterer Can't signup again with the same email\", done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger@test.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(500);\n                assert.equal(res.body.status, 'error');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/signup', err.message));\n    });\n});\n\ndescribe('Caterer Login Endpoint Tests', () => {\n    it('POST /auth/caterer/login - Caterer Login Validation Test(Required)', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/login`)\n            .send({\n                email: 'roger@test.com'\n            })\n            .then(res => {\n                expect(res).to.have.status(400);\n                assert.equal(res.body.status, 'error');\n                assert.equal(res.body.type, 'validation');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/login', err.message));\n    });\n    it('POST /auth/caterer/login - Caterer Cannot Login without being registered', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/login`)\n            .send({\n                email: 'thesis@science.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(500);\n                assert.equal(res.body.status, 'error');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/login', err.message));\n    });\n    it('POST /auth/caterer/login - Caterer Can Login', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/login`)\n            .send({\n                email: 'roger@test.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(200);\n                assert.equal(res.body.status, 'success');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/login', err.message));\n    });\n    it(\"POST /auth/caterer/login - Caterer Can't login with incorrect password\", done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/caterer/login`)\n            .send({\n                email: 'roger@test.com',\n                password: 'password111'\n            })\n            .then(res => {\n                expect(res).to.have.status(500);\n                assert.equal(res.body.status, 'error');\n                done();\n            })\n            .catch(err => console.log('POST /auth/caterer/login', err.message));\n    });\n});\n\nafter(done => {\n    Caterer.destroy({ where: { email: 'roger@test.com' } }).then(() => {\n        done();\n    });\n});\n"]}