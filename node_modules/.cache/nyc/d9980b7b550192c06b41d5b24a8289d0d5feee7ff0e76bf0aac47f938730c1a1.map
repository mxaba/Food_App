{"version":3,"sources":["user.js"],"names":["assert","chai","expect","use","chaiHTTP","API_PREFIX","before","done","describe","it","request","app","post","send","name","email","phone","then","res","to","have","status","equal","body","type","catch","err","console","log","message","password","after","User","destroy","where"],"mappings":"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","sourceRoot":"/home/mxaba/Desktop/My-Meal-App-develop/server/src/test","sourcesContent":["import chai from 'chai';\nimport chaiHTTP from 'chai-http';\nimport app from '../app';\nimport User from '../db/models/users';\n\nconst { assert, expect, use } = chai;\n\nuse(chaiHTTP);\n\nconst API_PREFIX = '/api/v1';\n\nbefore(done => {\n    done();\n});\n\ndescribe('User Auth Signup Endpoint Tests', () => {\n    it('POST /auth/signup - User SignUp Validation Test(Required)', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger@test.com',\n                phone: '08028372825'\n            })\n            .then(res => {\n                expect(res).to.have.status(400);\n                assert.equal(res.body.status, 'error');\n                assert.equal(res.body.type, 'validation');\n                done();\n            })\n            .catch(err => console.log('POST /auth/signup', err.message));\n    });\n    it('POST /auth/signup - User SignUp Validation Test(Email)', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger',\n                password: 'pass'\n            })\n            .then(res => {\n                expect(res).to.have.status(400);\n                assert.equal(res.body.status, 'error');\n                assert.equal(res.body.type, 'validation');\n                done();\n            })\n            .catch(err => console.log('POST /auth/signup', err.message));\n    });\n    it('POST /auth/signup - User Can Sign Up', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger@test.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(201);\n                assert.equal(res.body.status, 'success');\n                done();\n            })\n            .catch(err => console.log('POST /auth/signup', err.message));\n    });\n    it(\"POST /auth/signup - User Can't signup again with the same email\", done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/signup`)\n            .send({\n                name: 'Roger Test',\n                email: 'roger@test.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(500);\n                assert.equal(res.body.status, 'error');\n                done();\n            })\n            .catch(err => console.log('POST /auth/signup', err.message));\n    });\n});\n\ndescribe('User Auth Login Endpoint Tests', () => {\n    it('POST /auth/login - User Login Validation Test(Required)', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/login`)\n            .send({\n                email: 'roger@test.com'\n            })\n            .then(res => {\n                expect(res).to.have.status(400);\n                assert.equal(res.body.status, 'error');\n                assert.equal(res.body.type, 'validation');\n                done();\n            })\n            .catch(err => console.log('POST /auth/login', err.message));\n    });\n    it('POST /auth/login - User Login Validation Test(Email)', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/login`)\n            .send({\n                email: 'roger',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(400);\n                assert.equal(res.body.status, 'error');\n                assert.equal(res.body.type, 'validation');\n                done();\n            })\n            .catch(err => console.log('POST /auth/login', err.message));\n    });\n    it('POST /auth/login - User Cannot Login without being registered', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/login`)\n            .send({\n                email: 'thesis@science.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(500);\n                assert.equal(res.body.status, 'error');\n                done();\n            })\n            .catch(err => console.log('POST /auth/login', err.message));\n    });\n    it('POST /auth/login - User Can Login', done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/login`)\n            .send({\n                email: 'roger@test.com',\n                password: 'password'\n            })\n            .then(res => {\n                expect(res).to.have.status(200);\n                assert.equal(res.body.status, 'success');\n                done();\n            })\n            .catch(err => console.log('POST /auth/login', err.message));\n    });\n    it(\"POST /auth/login - User Can't login with incorrect password\", done => {\n        chai\n            .request(app)\n            .post(`${API_PREFIX}/auth/login`)\n            .send({\n                email: 'roger@test.com',\n                password: 'password111'\n            })\n            .then(res => {\n                expect(res).to.have.status(500);\n                assert.equal(res.body.status, 'error');\n                done();\n            })\n            .catch(err => console.log('POST /auth/login', err.message));\n    });\n});\n\nafter(done => {\n    User.destroy({ where: { email: 'roger@test.com' } }).then(() => {\n        done();\n    });\n});\n"]}