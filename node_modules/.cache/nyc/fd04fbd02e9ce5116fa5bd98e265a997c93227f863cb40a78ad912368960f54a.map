{"version":3,"sources":["orderControllers.js"],"names":["OrderControllers","req","res","body","mealId","quantity","OrderItem","findOne","where","userId","orderItem","response","status","message","create","newOrderItem","data","json","Order","findAll","catererId","orders","include","Meal","orderItems","Error","meals","total","forEach","orderMeal","meal","push","price","order","orderId","params","action","id","name","update","destroy","caterers","Set","add","OrderController","reduceQuantity","createOrders","user","then","dbMeal","Menu","menu","menuMeals","JSON","parse","updatedMenuMeals","map","menuMeal","updatedMenuMeal","stringify","shift","length","caterer","catererTotal","catererMeals","filter","catererMeal","delivery_status","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;IAEMA,gB;;;;;;;;;;;;+CACmBC,G,EAAKC,G;;;;;;;;4BAEKD,GAAG,CAACE,I,EAAzBC,M,aAAAA,M,EAAQC,Q,aAAAA,Q;;uBACQC,SAAS,CAACC,OAAV,CAAkB;AACxCC,kBAAAA,KAAK,EAAE;AAAEJ,oBAAAA,MAAM,EAANA,MAAF;AAAUK,oBAAAA,MAAM,EAAE;AAAlB;AADiC,iBAAlB,C;;;AAAlBC,gBAAAA,S;AAGAC,gBAAAA,Q,GAAW,E;;qBACbD,S;;;;;AACFC,gBAAAA,QAAQ,CAACR,IAAT,GAAgB;AACdS,kBAAAA,MAAM,EAAE,SADM;AAEdC,kBAAAA,OAAO,EAAE;AAFK,iBAAhB;;;;;;uBAK2BP,SAAS,CAACQ,MAAV,CAAiB;AAC1CV,kBAAAA,MAAM,EAANA,MAD0C;AAE1CC,kBAAAA,QAAQ,EAARA,QAF0C;AAG1CI,kBAAAA,MAAM,EAAE;AAHkC,iBAAjB,C;;;AAArBM,gBAAAA,Y;AAKNJ,gBAAAA,QAAQ,CAACR,IAAT,GAAgB;AACdS,kBAAAA,MAAM,EAAE,SADM;AAEdC,kBAAAA,OAAO,EAAE,iBAFK;AAGdG,kBAAAA,IAAI,EAAED;AAHQ,iBAAhB;;;iDAMKb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqBN,QAAQ,CAACR,IAA9B,C;;;;;iDAEAD,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,OADkB;AAE1BC,kBAAAA,OAAO,EAAE,YAAIA;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOWZ,G,EAAKC,G;;;;;;;;uBAEFgB,KAAK,CAACC,OAAN,CAAc;AACjCX,kBAAAA,KAAK,EAAE;AAAEY,oBAAAA,SAAS,EAAE;AAAb;AAD0B,iBAAd,C;;;AAAfC,gBAAAA,M;kDAGCnB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,SADkB;AAE1BC,kBAAAA,OAAO,EAAE,kBAFiB;AAG1BG,kBAAAA,IAAI,EAAEK;AAHoB,iBAArB,C;;;;;kDAMAnB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,OADkB;AAE1BC,kBAAAA,OAAO,EAAE,aAAIA;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOgBZ,G,EAAKC,G;;;;;;;;uBAEHI,SAAS,CAACa,OAAV,CAAkB;AACzCX,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,MAAM,EAAE;AAAV,mBADkC;AAEzCa,kBAAAA,OAAO,EAAE,CAACC,IAAD;AAFgC,iBAAlB,C;;;AAAnBC,gBAAAA,U;;oBAIDA,U;;;;;sBACG,IAAIC,KAAJ,CAAU,yBAAV,C;;;AAEFC,gBAAAA,K,GAAQ,E;AACVC,gBAAAA,K,GAAQ,C;AACZH,gBAAAA,UAAU,CAACI,OAAX,CAAmB,UAAAlB,SAAS,EAAI;AAC9B,sBAAMmB,SAAS,qBAAQnB,SAAR,CAAf;;AACAmB,kBAAAA,SAAS,CAACC,IAAV,CAAezB,QAAf,GAA0BK,SAAS,CAACL,QAApC;AACAqB,kBAAAA,KAAK,CAACK,IAAN,CAAWF,SAAS,CAACC,IAArB;AACAH,kBAAAA,KAAK,IAAIjB,SAAS,CAACL,QAAV,GAAqBwB,SAAS,CAACC,IAAV,CAAeE,KAA7C;AACD,iBALD;AAMMC,gBAAAA,K,GAAQ;AAAEP,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,KAAK,EAALA;AAAT,iB;kDACPzB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,SADkB;AAE1BC,kBAAAA,OAAO,EAAE,kBAFiB;AAG1BG,kBAAAA,IAAI,EAAEiB;AAHoB,iBAArB,C;;;;;kDAMA/B,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,OADkB;AAE1BC,kBAAAA,OAAO,EAAE,aAAIA;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOkBZ,G,EAAKC,G;;;;;;;AAEtBgC,gBAAAA,O,GAAYjC,GAAG,CAACkC,M,CAAhBD,O;AACAE,gBAAAA,M,GAAWnC,GAAG,CAACE,I,CAAfiC,M;;uBACgB9B,SAAS,CAACC,OAAV,CAAkB;AACxCC,kBAAAA,KAAK,EAAE;AAAE6B,oBAAAA,EAAE,EAAEH,OAAN;AAAezB,oBAAAA,MAAM,EAAE;AAAvB,mBADiC;AAExCa,kBAAAA,OAAO,EAAE,CAACC,IAAD;AAF+B,iBAAlB,C;;;AAAlBb,gBAAAA,S;;sBAIF0B,MAAM,KAAK,U;;;;;AACb1B,gBAAAA,SAAS,CAACL,QAAV,IAAsB,CAAtB;;sBACIK,SAAS,CAACL,QAAV,GAAqBK,SAAS,CAACoB,IAAV,CAAezB,Q;;;;;sBAChC,IAAIoB,KAAJ,gBACIf,SAAS,CAACoB,IAAV,CAAezB,QADnB,0BAEFK,SAAS,CAACoB,IAAV,CAAeQ,IAFb,mB;;;;uBAMFhC,SAAS,CAACiC,MAAV,CACJ;AAAElC,kBAAAA,QAAQ,EAAEK,SAAS,CAACL;AAAtB,iBADI,EAEJ;AAAEG,kBAAAA,KAAK,EAAE;AAAE6B,oBAAAA,EAAE,EAAE3B,SAAS,CAAC2B;AAAhB;AAAT,iBAFI,C;;;;;;;sBAIGD,MAAM,KAAK,U;;;;;AACpB1B,gBAAAA,SAAS,CAACL,QAAV,IAAsB,CAAtB;;sBACIK,SAAS,CAACL,QAAV,KAAuB,C;;;;;;uBACnBC,SAAS,CAACkC,OAAV,CAAkB;AAAEhC,kBAAAA,KAAK,EAAE;AAAE6B,oBAAAA,EAAE,EAAE3B,SAAS,CAAC2B;AAAhB;AAAT,iBAAlB,C;;;;;;;;uBAEA/B,SAAS,CAACiC,MAAV,CACJ;AAAElC,kBAAAA,QAAQ,EAAEK,SAAS,CAACL;AAAtB,iBADI,EAEJ;AAAEG,kBAAAA,KAAK,EAAE;AAAE6B,oBAAAA,EAAE,EAAE3B,SAAS,CAAC2B;AAAhB;AAAT,iBAFI,C;;;;;;;sBAKCD,MAAM,KAAK,Q;;;;;;uBACd9B,SAAS,CAACkC,OAAV,CAAkB;AAAEhC,kBAAAA,KAAK,EAAE;AAAE6B,oBAAAA,EAAE,EAAE3B,SAAS,CAAC2B;AAAhB;AAAT,iBAAlB,C;;;kDAEDnC,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,SADkB;AAE1BC,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;;;kDAKAX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,OADkB;AAE1BC,kBAAAA,OAAO,EAAE,aAAIA;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOiBZ,G,EAAKC,G;;;;;;;;uBAEJI,SAAS,CAACa,OAAV,CAAkB;AACzCX,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,MAAM,EAAE;AAAV,mBADkC;AAEzCa,kBAAAA,OAAO,EAAE,CAACC,IAAD;AAFgC,iBAAlB,C;;;AAAnBC,gBAAAA,U;AAIAE,gBAAAA,K,GAAQ,E;AACRe,gBAAAA,Q,GAAW,IAAIC,GAAJ,E;AACjBlB,gBAAAA,UAAU,CAACI,OAAX,CAAmB,UAAAlB,SAAS,EAAI;AAC9B,sBAAMmB,SAAS,qBAAQnB,SAAR,CAAf;;AACAmB,kBAAAA,SAAS,CAACC,IAAV,CAAezB,QAAf,GAA0BK,SAAS,CAACL,QAApC;AACAqB,kBAAAA,KAAK,CAACK,IAAN,CAAWF,SAAS,CAACC,IAArB;AACAW,kBAAAA,QAAQ,CAACE,GAAT,CAAad,SAAS,CAACC,IAAV,CAAeV,SAA5B;AACD,iBALD;;uBAMMwB,eAAe,CAACC,cAAhB,CAA+BnB,KAA/B,C;;;;uBACApB,SAAS,CAACkC,OAAV,CAAkB;AAAEhC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,MAAM,EAAE;AAAV;AAAT,iBAAlB,C;;;;uBACAmC,eAAe,CAACE,YAAhB,CACJL,QADI,EAEJf,KAFI,EAGJzB,GAAG,CAAC8C,IAAJ,CAASV,EAHL,C;;;kDAKCnC,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,SADkB;AAE1BC,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;;;kDAKAX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,kBAAAA,MAAM,EAAE,OADkB;AAE1BC,kBAAAA,OAAO,EAAE,aAAIA;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOiBa,K;;;;;;;AAElBI,gBAAAA,I,GAAOJ,KAAK,CAAC,CAAD,C;AAClBH,gBAAAA,IAAI,CAAChB,OAAL,CAAa;AAAEC,kBAAAA,KAAK,EAAE;AAAE6B,oBAAAA,EAAE,EAAEP,IAAI,CAACO;AAAX;AAAT,iBAAb,EACGW,IADH,CACQ,UAAAC,MAAM,EAAI;AACd,yBAAOA,MAAM,CAACV,MAAP,CACL;AAAElC,oBAAAA,QAAQ,EAAE4C,MAAM,CAAC5C,QAAP,GAAkByB,IAAI,CAACzB;AAAnC,mBADK,EAEL;AAAEG,oBAAAA,KAAK,EAAE;AAAE6B,sBAAAA,EAAE,EAAEP,IAAI,CAACO;AAAX;AAAT,mBAFK,CAAP;AAID,iBANH,EAOGW,IAPH,CAOQ,YAAM;AACV,yBAAOE,IAAI,CAAC3C,OAAL,CAAa;AAAEC,oBAAAA,KAAK,EAAE;AAAEY,sBAAAA,SAAS,EAAEU,IAAI,CAACV;AAAlB;AAAT,mBAAb,CAAP;AACD,iBATH,EAUG4B,IAVH,CAUQ,UAAAG,IAAI,EAAI;AACZ,sBAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACzB,KAAhB,CAAlB;AACA,sBAAM6B,gBAAgB,GAAGH,SAAS,CAACI,GAAV,CAAc,UAAAC,QAAQ,EAAI;AACjD,wBAAMC,eAAe,qBAAQD,QAAR,CAArB;;AACA,wBAAIA,QAAQ,CAACpB,EAAT,KAAgBP,IAAI,CAACO,EAAzB,EAA6B;AAC3BqB,sBAAAA,eAAe,CAACrD,QAAhB,IAA4ByB,IAAI,CAACzB,QAAjC;AACD;;AACD,2BAAOqD,eAAP;AACD,mBANwB,CAAzB;AAOA,yBAAOP,IAAI,CAACZ,MAAL,CACL;AAAEb,oBAAAA,KAAK,EAAE2B,IAAI,CAACM,SAAL,CAAeJ,gBAAf;AAAT,mBADK,EAEL;AAAE/C,oBAAAA,KAAK,EAAE;AAAE6B,sBAAAA,EAAE,EAAEc,IAAI,CAACd;AAAX;AAAT,mBAFK,CAAP;AAID,iBAvBH,EAwBGW,IAxBH,CAwBQ,YAAM;AACVtB,kBAAAA,KAAK,CAACkC,KAAN;;AACA,sBAAIlC,KAAK,CAACmC,MAAN,KAAiB,CAArB,EAAwB;AACtBjB,oBAAAA,eAAe,CAACC,cAAhB,CAA+BnB,KAA/B;AACD,mBAFD,MAEO;AACL,2BAAO,IAAP;AACD;AACF,iBA/BH;;;;;;;sBAiCM,IAAID,KAAJ,CAAU,aAAIZ,OAAd,C;;;;;;;;;;;;;;;;;;;;;gDAIgB4B,Q,EAAUf,K,EAAQjB,M;;;;;;AAExCgC,gBAAAA,QAAQ,CAACb,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAiB,kBAAMkC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,4BAAAA,YADW,GACI,CADJ;AAETC,4BAAAA,YAFS,GAEMtC,KAAK,CAACuC,MAAN,CAAa,UAAAnC,IAAI;AAAA,qCAAIA,IAAI,CAACV,SAAL,KAAmB0C,OAAvB;AAAA,6BAAjB,CAFN;AAGfE,4BAAAA,YAAY,CAACpC,OAAb,CAAqB,UAAAsC,WAAW,EAAI;AAClCH,8BAAAA,YAAY,IAAIG,WAAW,CAAC7D,QAAZ,GAAuB6D,WAAW,CAAClC,KAAnD;AACD,6BAFD;AAHe;AAAA,mCAMTd,KAAK,CAACJ,MAAN,CAAa;AACjBmB,8BAAAA,KAAK,EAAEoB,IAAI,CAACM,SAAL,CAAeK,YAAf,CADU;AAEjBrC,8BAAAA,KAAK,EAAEoC,YAFU;AAGjB3C,8BAAAA,SAAS,EAAE0C,OAHM;AAIjBrD,8BAAAA,MAAM,EAANA,MAJiB;AAKjB0D,8BAAAA,eAAe,EAAE;AALA,6BAAb,CANS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAjB;;AAAA;AAAA;AAAA;AAAA;;;;;;;sBAeM,IAAI1C,KAAJ,CAAU,aAAIZ,OAAd,C;;;;;;;;;;;;;;;;;;;;;AAKZuD,MAAM,CAACC,OAAP,GAAiBrE,gBAAjB","sourceRoot":"/home/mxaba/Desktop/My-Meal-App-develop/server/src/controllers","sourcesContent":["//import Order from \"../models/orders\";\n//import OrderItem from \"../models/orderItem\";\n//import Meal from \"../models/meals\";\n//import Menu from \"../models/menu\";\n\nclass OrderControllers {\n  static async postOrder(req, res) {\n    try {\n      const { mealId, quantity } = req.body;\n      const orderItem = await OrderItem.findOne({\n        where: { mealId, userId: 4 }\n      });\n      const response = {};\n      if (orderItem) {\n        response.body = {\n          status: \"warning\",\n          message: \"Order Already exists\"\n        };\n      } else {\n        const newOrderItem = await OrderItem.create({\n          mealId,\n          quantity,\n          userId: 4\n        });\n        response.body = {\n          status: \"success\",\n          message: \"Added to Orders\",\n          data: newOrderItem\n        };\n      }\n      return res.status(200).json(response.body);\n    } catch (err) {\n      return res.status(500).json({\n        status: \"error\",\n        message: err.message\n      });\n    }\n  }\n\n  static async getOrder(req, res) {\n    try {\n      const orders = await Order.findAll({\n        where: { catererId: 2 }\n      });\n      return res.status(200).json({\n        status: \"success\",\n        message: \"Orders Retrieved\",\n        data: orders\n      });\n    } catch (err) {\n      return res.status(500).json({\n        status: \"error\",\n        message: err.message\n      });\n    }\n  }\n\n  static async getOrderItems(req, res) {\n    try {\n      const orderItems = await OrderItem.findAll({\n        where: { userId: 4 },\n        include: [Meal]\n      });\n      if (!orderItems) {\n        throw new Error(\"User Has No Order Items\");\n      }\n      const meals = [];\n      let total = 0;\n      orderItems.forEach(orderItem => {\n        const orderMeal = { ...orderItem };\n        orderMeal.meal.quantity = orderItem.quantity;\n        meals.push(orderMeal.meal);\n        total += orderItem.quantity * orderMeal.meal.price;\n      });\n      const order = { meals, total };\n      return res.status(200).json({\n        status: \"success\",\n        message: \"Orders Retrieved\",\n        data: order\n      });\n    } catch (err) {\n      return res.status(500).json({\n        status: \"error\",\n        message: err.message\n      });\n    }\n  }\n\n  static async updateOrderName(req, res) {\n    try {\n      const { orderId } = req.params;\n      const { action } = req.body;\n      const orderItem = await OrderItem.findOne({\n        where: { id: orderId, userId: 4 },\n        include: [Meal]\n      });\n      if (action === \"increase\") {\n        orderItem.quantity += 1;\n        if (orderItem.quantity > orderItem.meal.quantity) {\n          throw new Error(\n            `Only ${orderItem.meal.quantity} servings of ${\n              orderItem.meal.name\n            } is available`\n          );\n        }\n        await OrderItem.update(\n          { quantity: orderItem.quantity },\n          { where: { id: orderItem.id } }\n        );\n      } else if (action === \"decrease\") {\n        orderItem.quantity -= 1;\n        if (orderItem.quantity === 0) {\n          await OrderItem.destroy({ where: { id: orderItem.id } });\n        } else {\n          await OrderItem.update(\n            { quantity: orderItem.quantity },\n            { where: { id: orderItem.id } }\n          );\n        }\n      } else if (action === \"delete\") {\n        await OrderItem.destroy({ where: { id: orderItem.id } });\n      }\n      return res.status(200).json({\n        status: \"success\",\n        message: \"Order Updated\"\n      });\n    } catch (err) {\n      return res.status(500).json({\n        status: \"error\",\n        message: err.message\n      });\n    }\n  }\n\n  static async checkoutOrders(req, res) {\n    try {\n      const orderItems = await OrderItem.findAll({\n        where: { userId: 4 },\n        include: [Meal]\n      });\n      const meals = [];\n      const caterers = new Set();\n      orderItems.forEach(orderItem => {\n        const orderMeal = { ...orderItem };\n        orderMeal.meal.quantity = orderItem.quantity;\n        meals.push(orderMeal.meal);\n        caterers.add(orderMeal.meal.catererId);\n      });\n      await OrderController.reduceQuantity(meals);\n      await OrderItem.destroy({ where: { userId: 4 } });\n      await OrderController.createOrders(\n        caterers,\n        meals,\n        req.user.id\n      );\n      return res.status(201).json({\n        status: \"success\",\n        message: \"Order Made\"\n      });\n    } catch (err) {\n      return res.status(500).json({\n        status: \"error\",\n        message: err.message\n      });\n    }\n  }\n\n  static async reduceQuantity(meals) {\n    try {\n      const meal = meals[0];\n      Meal.findOne({ where: { id: meal.id } })\n        .then(dbMeal => {\n          return dbMeal.update(\n            { quantity: dbMeal.quantity - meal.quantity },\n            { where: { id: meal.id } }\n          );\n        })\n        .then(() => {\n          return Menu.findOne({ where: { catererId: meal.catererId } });\n        })\n        .then(menu => {\n          const menuMeals = JSON.parse(menu.meals);\n          const updatedMenuMeals = menuMeals.map(menuMeal => {\n            const updatedMenuMeal = { ...menuMeal };\n            if (menuMeal.id === meal.id) {\n              updatedMenuMeal.quantity -= meal.quantity;\n            }\n            return updatedMenuMeal;\n          });\n          return menu.update(\n            { meals: JSON.stringify(updatedMenuMeals) },\n            { where: { id: menu.id } }\n          );\n        })\n        .then(() => {\n          meals.shift();\n          if (meals.length !== 0) {\n            OrderController.reduceQuantity(meals);\n          } else {\n            return true;\n          }\n        });\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n\n  static async createOrders(caterers, meals,  userId) {\n    try {\n      caterers.forEach(async caterer => {\n        let catererTotal = 0;\n        const catererMeals = meals.filter(meal => meal.catererId === caterer);\n        catererMeals.forEach(catererMeal => {\n          catererTotal += catererMeal.quantity * catererMeal.price;\n        });\n        await Order.create({\n          order: JSON.stringify(catererMeals),\n          total: catererTotal,\n          catererId: caterer,\n          userId,\n          delivery_status: 0\n        });\n      });\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n}\n\nmodule.exports = OrderControllers;\n"]}